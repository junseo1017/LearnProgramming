// 자바스크립트는 다른 멀티스레드 프로그래밍 언어와 다른 방식으로 비동기 동작으로 처리함.
// 내부의 비동기 동작을 이해하기 위해선 이벤트 루프 등의 개념을 알아야만 한다.

// 자바스크립트 엔진
// 자바스크립트 엔진은 하나의 메인 스레드로 구성됨
// 메인 스레드는 코드를 한 줄씩 실행함.
// 브라우저 환경에서는 유저 이벤트를 처리하고 화면을 그린다.

// 동기적 제어흐름
// 현재 실행 중인 코드가 종료되기 전까지 다음 줄의 코드를 실행하지 않는 것을 의미한다.
// 분기문, 반복문,함수호출 등이 동기적으로 실행
// 코드의 흐름과 실제 제어 흐름이 동일함.
// 싱글 스레드 환경에서 메인 스레드를 긴 시간 점유하면, 프로그램을 멈추게 한다.

//비동기적 제어흐름
// 현재 실행 중인 코드가 종료되기 전에 다음 라인의 코드를 실행하는 것을 의미.
// 프로미스, 콜백 함수를 호출하는 함수는 비동기적으로 실행됨.
// 코드 흐름과 실제 제어 흐름이 다름.
// 비동기 작업을 기다리는 동안 메인 스레드는 다른 작업을 처리

// 이벤트 루프
// 자스 엔진은 비동기 처리를 제공하지 않음.
// 대신, 비동기 코드는 정해진 함수를 제공하여 활용할 수 있음.(API)
// 비동기 API의 예시로 setTimeout, XMLHttpRequest,fetch등의 Web API가 있음.

// 비동기 처리 모델
// 이벤트 루프 / 태스트 큐 / 잡 큐 등으로 구성
// API 모듈은 비동기 요청을 처리 후 태스크 큐에 콜백 함수를 넣음.
// 호출 스택이 비워지면 태크스 큐의 콜백 함수를 실행.

// promise
// 비동기 작업을 표현하는 자바스크립트 객체
// 비동기 작업의 진행 성공 실패 표현
// 비동기 처리의 순서를 표현할 수 있음.

// Promise.resolve/.reject
// Promise.resolve(reject) : 성공(실패)한 promise를 인위적으로 반환
// Promise 메서드 체인을 인위적으로 만들 수 있다.
