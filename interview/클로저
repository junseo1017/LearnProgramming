 클로저 
 내부 함수가 정의될 때 외부함수의 scope를 기억하고 있는 내부 함수를 closure라고 합니다.
 
 자바스크립트는 렉시컬 스코프를 따르게 됩니다. 렉시컬 스코프는 함수가 호출되는 시점이 아닌, 선언되는 시점에 함수의 상위 스코프를 결정하게 되는 걸 의미합니다. 이러한 성질을 이용해서 외부 함수의 지역변수를 참조하는 내부 함수가 있다면 외부 함수가 호출되고 종료되어도 지역변수가 소멸되지 않고 메모리에 남아있게 됩니다. 그래서 내부 함수는 계속해서 외부 함수의 지역변수에 접근이 가능하게 된다는 원리입니다. 
 
 스코프는 무엇인지?
 변수나 함수 이름 같은 식별자가 선언된 위치에 따라 코드에서 참조될 수 있을지 없을지 결정하는 것을 의미합니다. 그래서 변수는 선언 시점과 위치에 따라 지역변수, 전역변수인지 결정되고 scope는 함수의 중첩에 의해 계층적인 구조를 가지게 됩니다. 이런 계층적인 연결 구조를 scope chain이라고 합니다. scope chain은 변수를 참조할 때 지역에서 전역순으로 이동하며 참조하게 됩니다. 


 클로저는 왜 사용하는지?
 첫 번쨰로, 특정 데이터를 클로저 함수 내부에 담아서 보존할 수 있습니다. 
 두 번째로, 모듈화입니다. 클로저 함수를 각각의 변수에 할당하게 되면 독립적으로 값을 보존하고 사용할 수 있습니다. 데이터와 메소드를 묶어서 모듈화시키기에 유리합니다.


