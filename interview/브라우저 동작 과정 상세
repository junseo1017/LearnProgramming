브라우저의 주요 기능 
> 사용자가 선택한 자원을 서버에 요청하고 브라우저에 표시.
> 자원의 주소는 URI에 의해 결정됨.

브라우저는 HTML 파일을 해셕해서 표시. 
> W3C에서 정한 표준을 따름.

---

브라우저의 기본 구조
1. 사용자 인터페이스 : 요청한 페이지를 보여주는 창을 제외한 나머지 모든 부분(주소 표시줄, 이전/다음 버튼 등)
2. 브라우저 엔진 : 사용자 인터페이스와 렌더링 엔진을 연결하고 동작을 제어
3. 렌더링 엔진 : 요청한 콘텐츠를 표시. HTML을 요청하면 HTML과 CSS를  파싱하여 화면에 표시
4. 통신 : HTTP 요청과 같은 네트워크 호출에 사용됨. 
5. UI 백엔드 : 체크박스,버튼과 같은 기본적인 위젯을 그려줌. OS 사용자 인터페이스 체계를 사용
6. 자바스크립트 해석기 : 자바스크립트 코드를 해석하고 실행 (ex. chrome의 v8)
7. 자료 저장소 : 보조 기억장치에 데이터를 저장하는 계층 (쿠키, webStorage 등)

---
렌더링 엔진의 목표
: 렌더링 엔진은 html / css / js / 이미지 등 웹 페이지에 포함된 모든 요소들을 화면에 표시.
: 업데이트가 필요할 때 효율적으로 렌더링하도록 자료 구조를 생성.


: 파이어폭스의 경우 모질라에서 만든 게코(Gecko) Engine, 크롬iOS과 사파리는 Webkit Engine, 크롬 blink 엔진을 사용

동작 과정
: 통신으로부터 요청한 문서의 내용을 얻는 것으로 시작. (내용은 보통 8kb 단위로 전송됨)

1. DOM 트리 구축을 위한 HTML 파싱
    - 렌더링 엔진은 HTML 문서를 파싱하고 콘텐츠 트리 내부에서 태그를 DOM 노드로 변환함. 
    - 그 다음 외부 CSS 파일과 함께 포함된 스타일 요소도 파싱. 스타일 정보와 HTML 표시 규칙은 '렌더 트리'라고 부르는 또 다른 트리를 생성.
2. 렌더 트리 구축 
    - 렌더 트리 : 색상 또는 면적과 같은 시각적 속성이 있는 사각형을 포함하고 있음. 정해진 순서대로 화면에 표시
3. 렌더 트리 배치
    - 각 노드가 화면의 정확한 위치에 표시되는 것을 의미.
4. 렌더 트리 그리기
    - UI 백엔드에서 렌더 트리의 각 노드를 가로지르며 형상을 만들어 냄

---

파싱
: 브라우저가 코드를 이해하고 사용할 수 있는 구조로 변환하는 것을 의미.
: 파싱 결과는 보통 parsing tree 또는 syntax tree라고 부름.

파싱 과정 
1. 문서
2. 어휘 분석 
  - 자료를 토큰으로 분해.
  - 비유하자면 사전에 등장하는 모든 단어에 해당
3. 구문분석 
  - 구문 분석
    - 언어의 구문 규칙을 적용하는 과정
4. 파싱 트리 생성 

* 위 과정이 반복. 파서가 어휘 분석기로부터 새 토큰을 받아 규칙과 일치하는지 확인.
* 규칙에 맞으면 토큰에 해당하는 노드가 파싱 트리에 추가된 뒤 또 다른 토큰을 요청.
* 규칙에 맞지 않으면 파서는 토큰을 내부적으로 저장하고 토큰과 일치하는 규칙이 발견될 때까지 요청.

변환
: 파싱은 문서를 다른 양식으로 변환함. 컴파일이 그 예시.
: 소스 코드를 기계 코드로 만드는 컴파일러는 파싱 트리 생성 후 이를 기계 코드 문서로 변환함.

컴파일 과정
1. 소스코드
2. 파싱
3. 파싱트리
4. 변환
5. 기계코드

DOM
: Document Object Model, HTML 문서의 객체 표현이며 JS와 같은 html 요소의 연결 지점. 트리의 최상위 객체는 document임.
: 파싱 트리는 DOM 요소와 속성 노드의 트리로서 출력 트리가 됨.
: DOM은 마크업과 1:1의 관계를 맺음.

HTML 파싱
    - HTML 파싱은 일반적인 파서를 사용하기 힘듬 
        - 언어의 너그러운 속성 (태그 생략이 가능한 점 등)
        - HTML에서 script 태그를 포함하여 토큰을 추가하는 경우, 변경에 의해 재파싱됨.
    - 브라우저는 HTML 파싱을 위해 별도의 파서를 생성

HTML 파서의 토큰화 알고리즘
    - 토큰화 : 어휘 분석으로, 입력 값을 토큰으로 파싱. HTML에서의 토큰은 시작 태그, 종료 태그, 속성 이름/값임.
    - 토큰화 알고리즘의 결과물은 HTML 토큰이며, 알고리즘은 State Machine이다. 하나 이상의 연속된 문자를 받아 다음 상태를 갱신함. 상태에 따라 같은 입력값이라도 다른 상태의 결과가 나올 수 있음.
        - '<'를 만났을 때의 상태는 태그 열림 상태로 변환. 이 상태에서 문자열을 만나면 태그 이름 상태
        - '>'를 만나면 자료 상태로 변환. 이 상태에서 문자열을 만나도 자료 상태 유지.

HTML 파서의 트리구축 알고리즘
    - 파서가 생성되면 문서 객체가 생성됨.
    - 트리 구축이 진행되면 문서 최상단에서는 DOM트리가 수정되고 요소가 추가됨.
    - 토큰화에 의해 발행된 각 노드는 트리 생성자에 의해 처리됨.

예시)
 <html>
   <body>
      Hello world
   </body>
</html>  

1) html 토큰은 'html 이전'모드가 되고 HTMLHtmlElement 요소를 생성한 뒤 문서 객체의 최상단에 추가.
2) 상태는 head 이전 모드로 바뀌었고, body 토큰을 받음. 
3) head 토큰이 없어도 HTMLHeadElement는 생성되어 트리에 추가된 뒤 'head 안쪽'>'head 다음' 모드로 변환. 
4) body 토큰이 처리되어 HTMLBodyElement가 생성. 'body 안쪽' 모드로 변환.
5) 'Hello world' 문자 토큰을 받으면 '본문' 노드가 추가되면서 다른 문자들이 노드에 추가됨.
6) body 종료 토큰을 받으면 'body 다음'모드가 되고, html 종료 태그를 만나면 'body 다음 다음' 모드로 바뀐 뒤 마지막 파일 토큰을 받고 파싱을 종료.

파싱이 끝난 이후의 동작
- 브라우저는 문서와 상호작용할 수 있게 되고, 문서 파싱 이후에 실행되어야 하는 '지연' 모드 스크립트를 파싱하기 시작함. 
- 문서 상태는 '완료'가 되고 '로드' 이벤트 실행. 


+ 오류 수정

---

css파싱