프로미스가 뭔가요?
프로미스는 자바스크립트 비동기 처리에 사용되는 객체입니다.

비동기 처리? 왜 하는건가요?
자바스크립트의 대부분의 코드는 동기적으로 실행되고 자바스크립트는 싱글 스레드 언어이기 때문에
서버에서 데이터를 받아오는 것도 동기적으로 실행한다면 데이터를 받아오는동안 사용자는 아무것도 할 수 없습니다.
그래서 서버 통신과 같은 작업은 비동기 처리를 통해 작업이 병렬적으로 실행되도록 해야합니다. 그럴 때 사용하는게 promise입니다.
promise는 코드는 실행됐지만 값이 반환되지 않은 객체로 then과 catch를 통해 결과값을 처리할 수 있습니다. 

비동기 처리를 동기적으로 하는 방법
위에서 말한 promise를 then chaning으로 하는 방법도 있고, async/await을 통해 처리하는 방법도 있습니다. 
함수에 async를 적용하게 된다면 그 함수는 자동적으로 프로미스 객체를 반환하게 됩니다. 
await은 async 함수 내부에서만 사용 가능하고 비동기 처리가 필요한 함수 앞에 붙여서 사용하게 되면 
프로미스가 settled 될 때까지 기다린 뒤에 resolve된 값을 반환합니다. 
그렇기 떄문에 await을 통해 비동기 처리 작업을 동기적으로 처리할 수 있도록 도와줍니다.

싱글 스레드인데 어떻게 병렬적으로 실행가능하죠?
 자바스크립트 런타임은 구성 요소는 크게 두가지입니다. js엔진과 web api인데,
 js엔진이 js코드를 읽고 해석해서 실행하는 것을 담당하고 싱글 스레드로 작동하기 때문에 자바스크립트가 싱글 스레드 언어라고 불립니다.
 비동기 작업은 또 다른 요소인 web api에서 처리되며, js엔진의 태스큐와 이벤트 루프가 합쳐져서 병렬적으로 실행되는 것처럼 보이게 할 수 있습니다.

태스크 큐? 
태스크 큐는 web api에서 처리된 비동기 함수가 일시적으로 머물러 있는 공간입니다.
태스크 큐는 api의 종류에 따라 매크로 태스크 큐 마이크로 태스크 큐로 나뉩니다. 
마이크로 태스크 큐에는 promise와 같은 api가 담기며 매크로 태스크 큐에는 setTimeout과 같은 api가 담기게 됩니다. 

태스크 큐에 쌓인 태스크들은 호출 스택이 빌 때까지 기다리다가 마이크로 태스크 큐가 먼저 실행되고 그 다음에 매크로 태스크 큐에 대기하고 있는 함수가 순차적으로 실행됩니다. 


이벤트 루프
자바스크립트 엔진이 비동기 함수를 핸들링 위해 사용하는 패턴입니다. 호출 스택이 빌 때 마다 태스크 큐에서 대기중인 함수를 가져와서 실행시킵니다.

실행 컨텍스트 
코드가 실행되기 위해 필요한 정보를 모아놓은 객체입니다.
