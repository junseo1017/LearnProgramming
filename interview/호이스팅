호이스팅이란?
자바스크립트에서 변수가 함수가 실행되기 전에 메모리 공간을 미리 할당하는 것을 의미합니다. 
함수가 실행되기 전에 스코프 내부의 함수 또는 변수를 모두 모아서 유효 범위 최상단에 선언하는 것을 뜻합니다. 
그래서 var로 변수 선언을 하게 되면 아직 선언하지 않은 변수나 함수를 참조했을 때 에러가 발생하는 것이 아니라, 
undefined로 값이 초기화돼서 출력되는 현상이 발생합니다.
(var로 할당된 변수는 끌어올려지지 않음)


호이스팅의 단점?
코드 가독성을 떨어뜨리고 유지보수를 어렵게 합니다. 
코드 가독성의 경우 아직 선언하지 않은 함수나 변수의 참조가 가능해지기 때문에, 순서대로 코드를 파악하기 힘들다는 단점이 있구요.
유지보수의 경우, 같은 이름의 변수나 함수를 선언했을 때 값이 덮어써지는 문제가 발생할 수 있기 때문입니다. 

호이스팅을 막기 위해선?
let과 const는 사용해야 합니다.
엄밀히 말하면 let const도 호이스팅이 발생하지만, 실질적인 선언부를 만나기 전까지 초기화되지 않기 때문에,
함수나 변수를 참조할 수 없는 상태인 TDZ에 머물러 있게 됩니다.  
그래서 let과 const를 사용하면 호이스팅을 방지하여 코드의 유지보수의 편리나 가독성을 올릴 수 있습니다. 

let과 const와 var의 차이점은 무엇인가?
지역변수와 전역변수에서 차이점을 찾을 수 있습니다. 
let,const는 지역변수, 즉 블록 스코프를 가지게 되구요 코드 블럭 내에서 선언번 변수는 코드블럭 내에서만 유효하게 사용됩니다 외부에서 접근할 경우, 에러가 발생합니다.
var의 경우 전역변수입니다. function 내부에서 사용한 var를 제외한 나머지 변수나 함수는 문서 전역에서 사용할 수 있습니다. 

