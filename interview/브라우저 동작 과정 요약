렌더링 엔진의 동작 과정
Critical Rendering Path

1. 통신으로 자료(html 파일 등)를 받아옴.
2. Dom Tree 생성 / CSSOM Tree 생성 : 브라우저에서 사용자가 요청한 웹페이지의 문서를 불러오고 파싱함.
3. render tree 구성 : dom 트리의 각 노드를 순회하면서 cssom tree를 매칭시킨 뒤 render tree에 구성. 이 때 render tree는 실제로 화면에 그려질 요소임.
- meta나 display:none은 배제됨.(render와 관계없기 때문)
4. layout(reflow) : render tree를 viewport 내에 어떻게 배치해야 할 것인지 노드의 위치와 크기를 계산함.
- 루트부터 노드를 순회하며 노드의 위차와 크기를 계산하고 render tree에 반영. 
5. paint(repaint) : render tree의 각 노드를 화면상의 실제 픽셀로 변환.

---

UI가 업데이트되는 상황(js실행, 애니메이션 실행 등)

1. 다시 layout이 발생하는 경우
: 요소의 크기나 위치가 바뀔 때, 브라우저 창의 크기가 바뀌었을 때 발생.
: 레이아웃 수치를 다시 계산해서 다시 배치해야 하기 때문.

2. paint부터 다시 발생되는 경우.
: 배경 이미지나 텍스트 색상, 그림자 등 레이아웃의 수치를 변화시키지 않는 스타일의 변경이 일어났을때 발생

3. 레이어의 합성(Composite)만 다시 발생하는 경우
: 레이어 : 페인팅할 영역을 나눠놓은 것을 의미
: 브라우저는 레이아웃 과정에서 정해진 기준이나 필요에 의해 레이어를 생성.
: render tree에 있는 노드객체들은 생성된 레이어에 포함
: 레이어는 트리 형태로 구성되고, 렌더링엔진이 레이어를 페인팅과정에서 그려주고 하나의 비트맵으로 합성해서 페이지를 완성.
