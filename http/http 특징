http (HyperText Transfer Protocol)
 - http 메시지에 모든 것을 전송 (html,text, image, 음성,영상, json,xml, 거의 모든 형태의 데이터 전송 가능, 서버 간 데이터를 주고 받을 때도 http)

기반 프로토콜
 - tcp : http/1.1,http/2
 - udp : http/3
 - 현재 http/1.1 주로 사용

http 특징
 - 클라이언트 서버 구조
 - 무상태 프로토콜(stateless), 비연결성
 - http 메시지
 - 단순함, 확장 가능

클라이언트 서버 구조
 - Request, Response 그조
 - 클라이언트는 서버에 요청을 보내고, 응답을 대기
    - 비즈니스 로직, 데이터를 서버에 몰아넣고 처리하고 클라이언트는 UI를 그리는데에 집중함.
    - 트래픽 증가 등에 대해 유연하게 대처할 수 있음.
 - 서버가 요청에 대한 결과를 만들어서 응답.

 무상태 프로토콜(stateless)
 - 서버가 클라이언트의 상태를 보존하지 않음.
 - 장점 : 서버 확장성 높음(스케일 아웃)
 - 단점 : 클라이언트가 추가 데이터 전송

 Stateful, Stateless 차이
 - 상태 유지 : 중간에 다른 점원으로 바뀌면 안된다(바뀐다면 상태 정보를 다른 점원에게 알려줘야 한다.)
 - 무상태 : 중간에 다른 점원으로 바뀌어도 된다.
    - 갑자기 고객이 증가해도 점원을 대거 투입할 수 있다
    - 갑자기 클라이언트 요청이 증가해도 서버를 대거 투입할 수 있다.
    - 무상태는 응답 서버를 쉽게 바꿀 수 있다. -> 무한한 서버 증설 가능

상태 유지 (stateful)
 - 항상 같은 서버가 유지되어야 함.
 - 통신하는 서버에 장애가 생길 경우 처음부터 다시 통신해야 함.
 무상태 (stateless)
 - 아무 서버나 호출해도 된다.
 - 통신하는 서버에 장애가 생길 경우 다른 서버로 전달함.
 - 스케일 아웃 - 수평 확장 유리

Stateless (실무)
  - 모든 것을 무상태로 설계할 수 있는 경우도 있고 아닌 경우도 있다.
  - 무상태 : 로그인이 필요 없는 단순한 서비스 소개 화면
  - 상태 유지 (ex, 로그인)
  - 로그인한 사용자의 경우 로그인 했다는 상태를 서버에 유지
  - 일반적으로 브라우저 쿠키와 서버 세션등을 사용해서 상태 유지
  - 상태 유지는 최소한만 사용

비연결성(connectionless)
 - 연결을 유지하는 모델
    - 서버는 연결을 계속 유지, 서버 자원 소모
 - 연결을 유지하지 않는 모델
    - 서버는 연결 유지x , 최소한의 자원 유지

비연결성
 - http는 기본이 연결을 유지하지 않는 모델
 - 일반적으로 초 단위 이하의 빠른 속도로 응답
 - 많은 사람이 동시에 서비스를 이용해도 실제 서버에서 동시에 처리하는 요청은 수십개 이하로 매우 작음
 - 서버 자원을 매우 효율적으로 사용할 수 있음.