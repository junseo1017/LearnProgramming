http 메서드

API URI
URI 설계에서 가장 중요한 것은 리소스 식별.
- 리소스의 의미
    - 회원을 등록하고 수정하고 조회하는 것이 리소스가 아님.
    - 회원이라는 개념 자체가 바로 리소스
- 리소스를 식별하는 방법
    - 회원을 등록하고 수정하고 조회하는 것을 모두 배제
    - 회원이라는 리소스만 식별하면 됨. > 회원 리소스를 URI에 매핑

- 예시 (어떻게 구분?)
    ex.
    회원 목록 조회 : /members
    회원 조회 : /members/{id}
    회원 등록 : /members/{id}
    회원 수정 : /members/{id}
    회원 삭제 : /members/{id}

- 리소스와 행위를 분리
    - URI는 리소스만 식별
    - 리소스와 해당 리소스를 대상으로 하는 행위를 분리
        - 리소스 : 회원
        - 행위 : 조회,등록,삭제,변경
    - 리소스는 명사, 행위는 동사
    - 헹위의 구분은 HTTP 메서드로 구분함.

----

http 주요 method
 - GET : 리소스 조회
 - POST : 요청 데이터 처리, 주로 등록에 사용
 - PUT : 리소스를 대체, 해당 리소스가 없으면 생성
 - PATCH : 리소스 부분 변경
 - DELETE : 리소스 삭제

Http 기타 method
 - HEAD : GET과 동일하지만 메시지 부분을 제외하고 ,상태 줄과 헤더만 반환
 - OPTIONS: 대상 리소스에 대한 통신 가능 옵션을 설명(주로 CORS에서 사용)
 - CONNECT : 대상 자원으로 식별되는 서버에 대한 터널을 설정
 - TRACE: 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행


 ----

GET 
 - 리소스 조회
 - 서버에 전달하고 싶은 데이터는 query(쿼리 파라미터, 쿼리 스트링)를 통해서 전달
 - 메시지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장하지 않음.
 * 메시지 전달 -> 서버 도착 -> 응답 데이터


---- 

POST 
 - 요청 데이터 처리
 - 메시지 바디를 통해 서버로 요청 데이터 전달
 - 서버는 요청 데이터를 처리
    - 메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행
 - 주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용
 * 메시지 전달 -> 신규 리소스 생성 -> 응답 데이터

POST에서의 요청 데이터 처리
 - 스펙 : POST 메서드는 대상 리소스가 리소스 고유한 의미 체계에 따라 요청에 포함된 표현을 처리하도록 요청.
    - POST가 사용되는 기능
        - HTML 양식에 입력된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공
            - HTML FORM에 입력한 정보로 회원 가입, 주문 등에서 사용
        - 게시판, 뉴스 그룹, 메일링 리스트, 블로그 또는 유사한 기사 그룹에 메시지 게시
            - 게시판 글쓰기, 댓글 달기
        - 서버가 아직 식별하지 않은 새 리소스 생성
            - 신규 주문 생성
        - 기존 자원에 데이터 추가
            - 한 문서 끝에 내용 추가

POST 정리
 - 새 리소스 생성(등록)
    - 서버가 아직 식별하지 않은 새 리소스 생성
 - 요청 데이터 처리
    - 단순히 데이터를 생성하거나, 변경하는 것을 넘어서 프로세스를 처리해야 하는 경우
        - 결제 완료 - 배달 시작 - 배달 완료처럼 값 변경을 넘어 프로세스의 상태가 변경되는 경우
    - POST의 결과로 새로운 리소스가 생성되지 않을 수도 있음
 - 다른 메서드로 처리하기 애매한 경우

---- 

PUT
 - 리소스를 대체 (덮어쓰기와 비슷한 개념)
    - 리소스가 있으면 대체
    - 리소스가 없으면 생성
 - 클라이언트가 리소스를 식별
    - 클라이언트가 리소스 위치를 알고 URI 지정
 * PUT은 리소스를 완전히 대체하기 때문에 필드가 변경될 수 있음. ({username, age}가 있는 필드에 {age} 데이터만 보낸 경우 {age}로 필드 변경)

----

PATCH
 - 리소스 부분 변경
 - PUT에서 리소스를 완전히 대체함으로서 발생하는 문제를 해소하기 위해 사용됨
 - 

---

DELETE
 - 리소스 제거

---

HTTP 메서드의 속성 
 - 안전(Safe methods) 
    - 호출해도 리소스를 변경하지 않는 경우 안전
 - 멱동(Idempotent Methods)
    - 호출 횟수가 상관없이 결과가 똑같다.
    - 멱등 메서드  
        - get : 같은 결과가 조회됨.
        - put : 결과를 대체하기 때문에 같은 요청을 여러번 해도 결과는 같음
        - delete : 같은 요청을 여러번 해도 삭제된 결과는 똑같음
        - post : 두 번 호출하면 같은 결제가 중복해서 발생할 수 있음. 멱등 x
    - 활용
        - 자동 복구 매커니즘
        - 서버가 정상 응답을 못주었을 때, 클라이언트가 같은 요청을 다시 해도 되는지 기준 삼으면 됨.
            - 재요청 중간 다른 곳에서 리소스가 변경되는 경우, 멱등은 외부 요인으로 중간에 리소스가 변경되는 것까지 고려하지 않음.
 - 캐시가능(Cacheable Methods)
    - 응답 결과 리소스를 캐시해서 사용해도 되는지
    - get,head,post,patch 캐시 가능
    - 실제로는 get,head정도만 캐시로 사용(post,patch는 캐시 키로 고려하기엔 구현이 쉽지 않음.)