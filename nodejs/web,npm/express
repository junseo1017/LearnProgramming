express는 필요에 따라 유연하게 구조 설정이 가능하다.
다양한 미들웨어를 통해 필요한 기능을 간단하게 추가할 수 있다.
모든 동작이 명시적으로 구성되기 때문에, 웹 프레임워크 동작 방식을 이해하기 좋다.

npm init
npm i express
처음부터 작성할 수 있는 방법 모든 구조를 작성해야해서 처음 접하는 사용자에게 쉽지 않다.

express generator를 사용
프로젝트 생성기
프로젝트의 기본 구조를 자동으로 생성해줌
npm start로 실행 가능
npm i -g express-generator
express my-web(프로젝트이름) // express 프로젝트 생성
npm i // express에서 제공하는 dependencies 다운
npm start

npx + express-generator
express-generator는 프로젝트 생성 이후에 사용되지 않기 때문에, npx를 사용한느 것도 좋은 방법



npm init을 이용한 express 시작하기
1. npm init
2. index.js파일 생성
3. index.js 파일에서
const express =require('express'); // express 모듈 불러오기
const app = express(); //app 객체 생성 // app 객체 : express.js의 기능을 담은 객체 // express.js의 모든 동작은 app.js에 정의됨
app.get('/',(req,res)=>{
    res.send('hello express') // hello express를 보내줌
})
app.listen(3000,()=>{
    console.log('server started') // 서버가 시작되면 콘솔찍기
})
4. script 에서 start : "node index.js"추가
5. npm start
6. 브라우저로 이동 


npm express-generator를 이용한 express 시작
1. npm i -g express-generator
2. express my-server(디렉토리명 밑에 다양한 디렉토리와 파일이 생성됨)
3. my-server이동 후 npm install로 패키지 다운
4. npm start를 통해 생성된 서버 확인 가능



express.js의 구조
 - app.js : express.js의 가장 기본이 되는 파일, 웹 애플리케이션의 기능을 정의
 - bin/www : express.js 실행 부분을 담당, 포트와 실행 오류 등을 정의
 - package.json : 프로젝트 의존성 및 스크립트 정의
 - public : 코드를 통하지 않고, 직접 제공되는 파일 디렉터리 // static file serving directory
 - routes : 라우팅 파일 디렉터리
 - views : html template 디렉터리


express.js 동작 방식
 - 브라우저에서 local3000접속
 - app.js>app.use('/',indexRouter)
 - routes/index.js -> router.get('') -> res.render('index')
 - views/index

app 객체 주요 기능
 - app.use() middleware를 사용하기 위한 함수
 - app.listen() http서버를 생성해주는 함수, express-generator를 사용하면 HTTP.createServer를 사용하는데, app.listen으로 대체 가능
 - app.locals app에서 사용할 공통 상수, express.js에선 global 변수를 선언하지 않고 이 값을 사용할 수 있음.


 라우팅 : 다양한 라우팅 방식을 제공 크게 app 라우팅과 express.router를 통한 라우팅으로 나뉘어짐
 app 라우팅
 app 객체에 직접 get,post,put,delete 함수를 사용하여 http method로 라우팅 할 수 있음.
 http method 함수의 첫 번째 인자가 이 라우팅을 실행할 url 마지막 인자가 라우팅이 실행될 때 작동하는 함수
 all 함수를 사용하면 http method에 상관없이 라우팅 가능
 app.get('/',(req,res)=>{
     res.send('GET/');
 })
  app.all('/all',(req,res)=>{
     res.send('GET/');
 })
 
 express.router
 : app 라우팅을 통해서는 라우팅의 핵심인 그룹화를 지원하지 않음
   express.router를 통해 라우팅을 모듈화 할 수 있음
 
 router 객체에도 app 객체처럼 get,put,post,delete 함수를 사용할 수 있음
 app의 함수와 동일한 동작을 하는 함수로 첫 번째 인자가 라우팅 될 URL이고, 마지막 인자가 라우팅 시 실행될 함수
 라우터는 일반적으로 모듈로 만들어서 사용.
 const express = require('express');
 const router = express.Router();
 router.get('/',(req,res,next)=>{
     res.send('respond with a resource');
 });
 module.exports = router;

 작성된 라우터 모듈을 app.js에서 use함수로 연결하여 사용할 수 있다. 
 router 객체에도 하위 라우터를 use함수로 연결하여 사용할 수 있다. 
/ app.js
const userRouter = require('./routes/users'); // 라우츠에 user함수로 선언된 모듈을 userRouter에 할당
const app = express()
app.use('/users',userRouter); app.use를 사용하여 하위 경로를 user로 설정하겠다는 의미. 이렇게 선언하면 웹 페이지에 users 경로로 들어오는 그 이하의 모든 url에 대해서는 userRouter에서 먼저 처리하겠다는 뜻.

/ ./routes/users.js
const petRouter = require('./pets')
const router = express.Router();
router.use('/pets',petRouter)
module.exports = router; // user 하위 경로는 userRouter로 들어오지만 userRouter로 들어온 users 하위 경로 중 users의 pets 경로는 다시 petRouter에서 먼저 처리하겠다는 뜻



라우팅 - path parameter 사용
express 라우팅은 path parameter를 제공
path parameter를 사용하면, 주소의 일부를 변수처럼 사용할 수 있음
; ex) /users/:id > /users/123, /users/456 등으로 접속했을 때 라우팅 적용
; ex) /messages/:"from-:to" > /message/123-456 등으로 접속했을 때 라우팅 적용


Request Handler
라우팅에 적용되는 함수를 Request Handler라고 부름
http 요청과 응답을 다룰 수 있는 함수
설정된 라우팅 경로에 해당하는 요청이 들어오면 Request Handler 함수가 실행됨
router.get('/:id',(req,res)=>{
    const id=req.params.id
    res.send(`hello ${id})
})
Request 객체 : http 요청 정보를 가진 객체
 - path parameter : URL 표현 중 /path/:id에서 :id를 req.params.id로 사용할 수 있음
 - query parameter : URL 표현 중 /path?page=2에서 page부분을 req.queries.page로 사용할 수 있음
 - body : 일반적으로 POST 요청의 요청 데이터를 담고 있음 req.body에 요청 데이터가 저장되어 들어옴
 - header : req.get('Authorization')등으로 값을 가져옴
 
Response 객체 : http 응답을 처리하는 객체. 
 - res.send() : text 형식의 HTTP 응답을 전송
 - res.json() : json 형식의 http 응답을 전송
 - res.render() : html template을 사용하여 화면을 전송
 - res.set() : http 응답의 헤더를 설정
 - res.status() : http 응답의 상태 값을 설정함. 
